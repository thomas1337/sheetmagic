/*
 * generated by Xtext 2.25.0
 */
package com.coffeestorm.dsl.sheetmagic.generator

import com.coffeestorm.dsl.sheetmagic.sheetmagic.Model
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.coffeestorm.dsl.sheetmagic.utils.Utils

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SheetmagicGenerator extends AbstractGenerator {

	var CharSequence parametersOut = ""
	var CharSequence areasOut = ""
	var CharSequence sheetNamesOut = ""
	var CharSequence mainOut = ""

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		val model = resource.contents.get(0) as Model
		sheetNamesOut = generateNamesFileContents(model)
		parametersOut = generateParametersFileContents(model)
		areasOut = generateAreasFileContents(model)
		
		fsa.generateFile('Names.txt', sheetNamesOut)
		fsa.generateFile('Parameters.txt', parametersOut)
		fsa.generateFile('Areas.txt', areasOut)
		fsa.generateFile('Main.txt', mainOut)
	}
	
	def generateAreasFileContents(Model model) {
		'''«generatedStartTag»«FOR m : model.areaMappings SEPARATOR "\n"»
		function get«m.name.toFirstUpper»() {
			const ss =  SpreadsheetApp.getActiveSpreadsheet();
			const sheet = ss.getSheetByName(get«m.sheet.name»SheetName())
			return sheet.getRange(«m.startRow», «Utils.convertToIntegerIndex(m.startCol)», «m.numRows», «m.numCols»).getValues()
		}
		«ENDFOR»«FOR m : model.areaMappings SEPARATOR "\n"»
		function get«m.name.toFirstUpper»Range() {
			const ss =  SpreadsheetApp.getActiveSpreadsheet();
			const sheet = ss.getSheetByName(get«m.sheet.name»SheetName())
			return sheet.getRange(«m.startRow», «Utils.convertToIntegerIndex(m.startCol)», «m.numRows», «m.numCols»)
		}
		
		function get«m.name.toFirstUpper»StartRow() {
			return «m.startRow»
		}
		function get«m.name.toFirstUpper»StartCol() {
			return «Utils.convertToIntegerIndex(m.startCol)»
		}
		function get«m.name.toFirstUpper»NumRows() {
			return «m.numRows»
		}
		function get«m.name.toFirstUpper»NumCols() {
			return «m.numCols»
		}
		«ENDFOR»«generatedEndTag»
		'''
	}
	
	def generateNamesFileContents(Model model) {
		'''«generatedStartTag»«FOR sheet : model.sheets SEPARATOR "\n"»
		function get«sheet.name.toFirstUpper»SheetName() {
			return "«IF sheet.alias !== null»«sheet.alias»«ELSE»sheet.name«ENDIF»";
		}
		«ENDFOR»«generatedEndTag»
		'''
	}
	
	def generateParametersFileContents(Model model) {
		'''«generatedStartTag»«FOR m : model.paramterMappings SEPARATOR "\n"»
		function get«m.name.toFirstUpper»() {
			const ss =  SpreadsheetApp.getActiveSpreadsheet();
			const sheet = ss.getSheetByName(get«m.sheet.name»SheetName())
			return «IF "int".equals(m.type) || "float".equals(m.type)»parse«m.type.toFirstUpper»(«ENDIF»sheet.getRange("«m.to»").getValue()«IF "int".equals(m.type) || "float".equals(m.type)»)«ENDIF»
		}
		«ENDFOR»«generatedEndTag»
		'''
	}
	
	def generatedStartTag() {
		'''/*** GENERATED CODE START ***/'''
	}
	
	def generatedEndTag() {
		'''/*** GENERATED CODE END ***/'''
	}
}
